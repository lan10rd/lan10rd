==== best way that i have found (only works with no merge conflicts) ====
git checkout yourBranch
git reset $(git merge-base master $(git branch --show-current))
git add -A
git commit -m "one commit on yourBranch"
git push --force


=====the only sure fire way is=====
(1) pull develop and resolve merge conflicts to your branch
  git pull origin develop

(2) checkout develop (and git pull), and create a temp branch
  git checkout develop && git pull && git checkout -b squashy

(3) pull in changes from your feature branch to the temp (dont forget squash!)
  git merge feature/branch-name --squash

(4) commit the change (-n to skip annoying commit hooks like linting)
  git commit -m "my commit" -n

(5) go back to feature branch and this is where the trick comes
  git reset --hard squashy

(6) push upstream, requires force
  git push --no-verify -f 

(7) cleanup
  git branch -D squashy



  

---- another 2 options ------

a. just start with master branch
git checkout develop
git pull
git checkout -b feature-123-squash
git merge origin/feature-123 --squash
git push

-- once pr is raised if you need to fix anything
git add .
git commit -m "message" --amend
git push --force

-- in case you already commited a 2nd and 3rd commit on a pr and need to fix it to be one --
git reset --soft HEAD~3
git commit -m "single commit message
git push --force



---- if you already have multiple commits ---
git rebase -i

--- replace all but the most recent (top) with squash ---

git commit --amend

---- if you need to have all your changes in one commit for pipeline reasons, --
git commit -m "first"
git commit -am "second, but replaces the last commit essentially so that you can continue to work"
git commit -am ""