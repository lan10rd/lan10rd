imports: [   
 HttpClientModule,  
 HttpClientXsrfModule.withOptions({
   cookieName: 'My-Xsrf-Cookie', // this is optional
   headerName: 'My-Xsrf-Header' // this is optional
 }) 
]

/* Additionally, if your code targets API via absolute URL, default CSRF interceptor will not work out of the box. Instead you have to implement your own interceptor which does not ignore absolute routes. */

@Injectable()
export class HttpXsrfInterceptor implements HttpInterceptor {

  constructor(private tokenExtractor: HttpXsrfTokenExtractor) {
  }

  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    const headerName = 'X-XSRF-TOKEN';
    let token = this.tokenExtractor.getToken() as string;
    if (token !== null && !req.headers.has(headerName)) {
      req = req.clone({ headers: req.headers.set(headerName, token), withCredentials: true }); // keep in mind i would prefer not headers: to setHeaders: xtraHeaders, where xtraHeaders is   let xtraHeaders = {'X-XSRF-TOKEN': this.tokenExtractor.getToken()}
    }
    return next.handle(req);
  }
}

providers: [
  { provide: HTTP_INTERCEPTORS, useClass: HttpXsrfInterceptor, multi: true }
]


/* ANNND to make the first call, also do this in app module (also bring in HttpClient into app module) */

let appInit = (http: HttpClient) => { return () => { return http.get('urlto/xsrf', {withCredentials: true}).toPromise() }}


/* in providers add the interceptor and the app initializer! */

providers: [
  {provide: APP_INITIALIZER, factory: appInit, multi: true, deps: [HttpClient]},
  {provide: HTTP_INTERCEPTORS, useClass: HttpXsrfInterceptor, multi: true}
]

/* keep in mind you only want HttpClientModule once in the app, lazy loaded modules will get there own version of the http module if you import it again, and it wont use the interceptor that was provided!! */