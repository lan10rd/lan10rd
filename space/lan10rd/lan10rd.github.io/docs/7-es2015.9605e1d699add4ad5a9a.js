(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{gBXZ:function(e){e.exports=JSON.parse('{"Ownership":{"description":"Leaders are owners. They think long term and don\u2019t sacrifice long-term value for short-term results. They act on behalf of the entire company, beyond just their own team. They never say \u201cthat\u2019s not my job.","Situation":"(1) There was a new epic / initiative by the Life Events program team to bring personalization features to the product line.  The features were not specified in there entirety, but some of the desired outcomes would allow for 1) content to be specific to the user 2) drive deeper engagement 3) help bring in clients to on site branches through an appointment scheduler. \\n (2) Tribe initiative to update all angular apps to the latest version, at the time it was 11.  This was a bit significant (well 10 was) as it\'s a new version of the compiler, but that aside should be business as usual. I wasn\'t assigned this task, as I had many other development features underway.  Other teammates had different tasks related to this, and since we still had other apps outside our main monorepo (makes upgrades a breeze, normally).  There were separate stories to upgrade angular versions in each repo.  So, our teammates did what they could, where we landed was one tool CCP, was not able to upgrade at all (it started on a version of angular before 4 even, and the devs who made the tool originally did so on an old build stack with gulp, and manual webpack).  Our main app in the monorepo ran fine, but the header dependency broke, and the SSG renderer also broke.  My teammates spent a couple weeks on trying to resolve this issue, and every day were giving similar stand ups.","Task":"(1) My exact task was to use a spike story to analyze how we could implement an appointment scheduler using other platform APIs and how we could display it.  I deduced that there was 5 APIs to onboard to. There was no UX requirement yet but i found other pages on the site that gave branch information and scheduling but it was no mobile friendly and also was complicated.  There was also an api that could keep application state (we had no database) by user. \\n (2) I knew this was not a great scenario, the quarter was soon ending, and our product and chapter leads were not happy.","Action":"(1) From the initial analysis it was clear that there was still no clear vision for how the appointment scheduling would fit into to what is essentially a blog type of application (very content heavy, with a few business features on specific pages). Given the product spans the 2 biggest domains and both have their own top header, it would be a little clunky to implement a second navbar.  However, there was a side bar (on the right side) that randomly asks for feedback, and is less than the size of a thumnail.  I used this as inspiration for where a user could impromptu at any moment schedule an appointment and not be bounced around in a new tab or from site to site.  I wanted an application menu that was non intrusive but very handy, like a quick access menu.  I started to develop the feature such that there was a global life events overlay that could be opened (in the form of a familiar popup, internal bootstrap like template).  Then, I went on to build out the prototype using angular materials calendar datepicker (it allows for easy data binding to date objects and date ranged for years). I finished out by pulling all the branches in through a rest call, got location, hours, picture, information, displayed it and showed that the user could switch branches and timelines.  I didnt stop there though, with a new global overlay it was clear that we could use this for preferences, global navigation, and search functions all while maintaining a mobile responsive experience that didn\'t leave the tab or page.  I added background colors and glowing themes, search across all 10 life events (over 100+ pages), and global navigation (which we did not have). Also, using the state api I made calls such that the last pages would be remembered (per life event, so that when you land on the overview you can continiue reading where you left off).  Lastly, I implemented a feature using the Intersection Observer API (and Bounding Client rectangle for IE support), such that when you get to the bottom navigation component, a call is page to mark that page as read. \\n (2)  So I decided to look into a few things, starting with the SSG renderer.  This dependency was still technically in alpha, and we were using it in prod for a year.  I didn\'t really like the idea of external dependencies and so I looked into alternatives.  Turns out their is a technology puppeteer (which Scully uses underneath), that loads a chromium instance and then draws the page, giving you the ability to save it. This is exactly what we needed for our use case so I resolved this issue and raised a pr and gave a kt.  Then the 2 big things outstanding were the header, which is serious, and our lesser used tool which is stuck in an old stack.  So I decided to do the header first, i went into the source for the dependency and realized the header was built on an angular 1 dependency, that had just been given updated versions, and it was no longer working with the new compiler, so I just crafted a new component in our shared library, then made it work.  This actually gives the whole company a working header for both of our biggest domains, and one less dependency.  Finally there was the old ccp tool.  I knew at some point it doesnt make sense to have all these javascript apps (angular and nest) in separate repos when we do everything new in our monorepo.  I decided to again just make new apps in our monorepo, and pull the source code out of the other repos. ","Result":"(1) The innovation was well received, and my product owners were very impressed and happy.  UX had not given a final review so we are doing minor changes, but for a proof of concept this was personally my favorite feature for the life events content app (1 year old), and is bound for production q3 2020. I personally cannot wait to use this on my personal account, and my tech lead is excited to show this off to the tribe and the potential for attracting anonymous users to make an account just to keep a theme on page load/ device / browser switch! \\n (2)  Took some time and was off the books, but I was able to tackle all 3 of the biggest challenges our team had faced in pursuit of normal tech maturity.  Our team is no rid of any big dependencies and all of our components and apps are maintained in a single monorepo.  Development is easier, and upgrades in the future will also be easier."},"Bias for action":{"description":"Speed matters in business. Many decisions and actions are reversible and do not need extensive study. We value calculated risk taking.","Situation":"(1) Joining in March 2019, I was a several months and discussions late to the revamp initiative of the Life Events project at Fidelity.  The latest iteration was using angular repo and nest repo separately and each life event has multiple pages (very much like blog / article format) per life event that has content and links to relevant products and vendors.  The normal story for adding a page was to have a business analyst enter content into the CMS, and have a developer pull in that content at the front end angular app, each page being made via its own html/css/ts/module/routing module/spec.ts and then under going qa and business review.  This process meant that it took about 1 sprint for 1 page to be completed, so with about 4 devs it was around 3 weeks to make an entire life event, and another 1 week for bug fixes (there were around 80 per life event).  This was a very manual process, and despite the new UI looking better, the development was painstaking, limiting as adding content means development instead of content edits, and a new release.  There are 35 life events in the project, thus it would take 35 * 2 months == 70 months, basically 5 years to do the replacement.  This was a very long project time, but as a developer just after a few sprints I was dreading the monotony.\\nWorking across business domains / realms to produce a crossover app (rare but very valuable).  Different standards from the two sides, different ecosystems.  The challenge comes not just because the ui styles header / footer integration is different, but mainly as the content that each page shows is supposed to be dynamic. (2) AI Search feature where from our splash page we can search content across the entire app.  Really cool but there was a lot of debate as i think just having AI in the name of the feature really made people think it was gonna be super complicated.","Task":"(1) Create a crossover app that supports the same functionality with the redesigned UX templates (which weren\'t handed off yet in html/css form, but there were wireframes) and allows for dynamic content suppression / addition. \\n (2) The goal was to have this deliverable to both domains by Q4.  The struglle was really how to understand how to give all WI content up front, as they content is controlled by entitlements. ","Action":"(1) Start by understanding Nrwl monorepo, a bleeding edge technology. Then try to figure out the best way to create an application that could have infinite pages that were dynamically loaded.  The current process was manual.  We needed more of an automatic approach.  The UX templates were still half baked.  The easiest place to start was to understand that we needed reusable components, each page could be assembled by inputing data (json) and could use angular\'s template ngIf, ngSwitch case, to dynamically draw the page.  I stubbed out the components using the pdf wireframes, and took liberty with the stylings.  Then, from what i could deduce would be the schema, I modeled the UI schema for each component.  Now, I can make a feature that pulls all the presentation elements together, and calls an api to fetch the pages.  Made a few sample page templates (json) using a mix of the components, voila.  Now, we have a starting place.  Added a wildcard route, and provided example links and structure for what a life event is (a collection of json pages and url routes mapping to those pages).  Then, deployed that to qa.  This was still all stubbed out with mock data, and mock UI. \\n (2) I decided to start with a simpler use case to clear the air.  Our PI (public facing site) is the simpler use case, so what i did was I quickly extended a fetch all (a little nuanced cause though all our life events load in the same ui, the api underneath uses two different architectures).  This endpoint is firstly what the AI team needed to do anything, as they do an \'ingestion\' cycle and use that for NLP indexing.  This gave the AI team all they needed and they quickly gave me the endpoint for search.  I was able to do a quick mock up (no styling) of all the UX / business concerns, and was able to show that search is ready for PI (non prod) and prod in Q3.","Result":"(1) This mock up POC was very powerful.  It showed we could at least have the app with a header footer, and dynamic content. From there we split up stories to start drawing in the content into the page templates instead of mocks, and got the intended urls.  We did all this with 3 weeks before our deadline, when we finally got the final UX component designs.  We did the refactor I anticipated and met our deadline right on time! \\n (2) At this point the only remaining challenge is how to tackle the other big domain our app loads in, WI.  So the biggest thing is entitled content, but after analyzing the results and what is viewed, it\'s not actually the entire component, but either a deep link to the same page, or a render of a video, or of a micro tool.  The only results that are not common across both PI and WI is actually the \'actions\', which are usually links to sponsored products.  So I explained this and now this is the approach we are leaning on for MVP1, we will scrub actions from the results, and artificially bring them in with the scores of their companions (because I know what page the safe content comes from, and I have the user information per request, I can actually make a request to the endpoint that normally is used (gives entitled content), and then pick out actions from those pages and bring them into the results. Safe! and ready a whole quarter in advance!"},"Insist on Highest Standards":{"description":"Leaders have relentlessly high standards \u2014 many people may think these standards are unreasonably high. Leaders are continually raising the bar and drive their teams to deliver high quality products, services, and processes. Leaders ensure that defects do not get sent down the line and that problems are fixed so they stay fixed.","Situation":"Scrollbars, scrollbars everywhere...\\nSpinning wheels, spinning wheels everywhere...\\nI had just joined the Life Events team which was in the process of revamping the project with a new UI and API. The wireframes gave a nice article like view with a side bar navigation.  The issue was there was 3 vertical scrollbars and 1 horizontal scrollbar.  Just joining the team, and with my previous efforts at my last project in making things mobile friendly and responsive, scrollbars are a bit taboo.  The other point thing was the loading animation that happened not just on page load initially, but page transitions and also if you went back to page you were just on! The app is a Single Page Application, the context shouldn\'t be lost like that (being all choppy).  I noticed that we had a service that loads content for the pages, and noticed that the router guard (parent router guard for the entire life event) was a good opportunity to preload the pages in that event for a chance to ease transitions and make a smooth reading experience.","Task":"It was not part of my stories, but I wanted to show my worth to the team as a new hire and also ease my mind, when showing stakeholders the new product I did not want them to have doubts.  I secretly worked on a branch to get it down to a single scrollbar and inital spinning wheel.","Action":"I fixed said issues while maintaining the expected velocity.  I also threw in a lovely little cubic bezier transition which really tied together the sideview transitioning up and down. I also added a nice little fade animation as now there were no spinners between page navigations (worked the content loader service to preload other life events) back and forth","Result":"Readability and user experience was now pleasant.  The team loved the fixes, and it was right on time for a presentation / demo for the tribe!"},"Have Backbone; Disagree and Commit":{"description":"Leaders are obligated to respectfully challenge decisions when they disagree, even when doing so is uncomfortable or exhausting. Leaders have conviction and are tenacious. They do not compromise for the sake of social cohesion. Once a decision is determined, they commit wholly.","Situation":"The \\"new\\" 2018 rendition of life events was pulling in content directly to the UI from the content management system, the 2019-2020 redesign also needed to take into account that the app will be loading in 2 different domains with different content requirements.  There was an initiative to expand the scope of the product line to the other major domain of the company, the Corporate Retirement Benefits division, NetBenefits.  Previously, the latest revamp of the product was only available to the retail consumer Planning and Investments domain. To top it off, the latest revamp was not going to be used because there was a new version of UX in the works. It was early July and we had until August 12 to send out the College life event with the new specs and cross domain capabilities.","Task":"I was advocating for modularization, should not have been a hard sell.  The current team had already gotten used to how they were doing things and had already established a relationship with the architect.  I wanted reusable components, and i wanted to move the pages to the api instead of the ui.  This serves a lot of purposes.  We could (if ever got a cache or db) make updates to pages (as they are just json files / configuration) without redeploying / releasing the UI.  Each developer wouldnt have to manually keep track of 7 files when making a page, and have countless bugs.  I argued that the front end api layer could recache the pages via cron expression, thus reducing the load on the central CMS, if it ever went down, we would still be able to function.  Also we could preload into the client all life event pages, or all pages in the life event, the current system was loading page by page when i joined.  We could also control the content before it went out the door, something we needed to be able to do if we were to support dynamically hiding / showing content for the other domain.","Action":"I decided to run with a POC to demonstrate and stood up to the architects and original team (my new squad was very new) at the joint tech team meetings. It was very much myself demonstrating load times and client performance in lighthouse, and hard because it was very critical of the process the other team had put together.","Result":"Eventually I was able to convince the other team to join my side as I illustrated to do it with the other approach would require at least twice the dev effort as we would be making a page by hand for PI and then again for WI.  The business (product owner / squad lead) also joined my side and allowed me to get a story to start off the new project.  The same system is still alive today we are a year in with 10 life events, both sides happy customers!"},"Invent and Simplify":{"description":"Leaders expect and require innovation and invention from their teams and always find ways to simplify. They are externally aware, look for new ideas from everywhere, and are not limited by \u201cnot invented here. As we do new things, we accept that we may be misunderstood for long periods of time.","Situation":"Angular Material (maker feature), TTS (text to speech, speech to text)\\nSo after all the rearchitecture and monorepo implementation of the life events content app that i drove, there was an opporunity I saw to do some cool stuff with the json templates. Similar to a storybook type playground, I saw an opporunity for non developers to play with the library components in a qa non prod environment, with live pages and also with a blank starter.","Task":"Implement a drag and drop interface such that pages could be rearranged on the fly using the underlying content management system and UI components.  Should be friendly and intuitive and only available in non prod.","Action":"Got started on a feature branch in my spare time.  Got to the point where you could use ctl + double click in non prod and a sticky toolbar with appear.  you could then drag and drop, rearrange, edit, export.  Also saw a chance to have TTS text to speech implemented for supported browsers (was a new API at the time). And got started implementing it.  This led me to understand more about angular\'s zone.js implementation for change detection, as the speech to text (to search and have siri like commands to do things like navigate or describe a life situation and navigate to a relevant page).","Result":"It was really a smash hit.  We merged to master and demoe\'d to the product team and as far as innovation goes it was a talking point throughout the whole tribe.  For those familiar with life events this really stunned everybody. I was happy to showcase new browser APIs and the future of web development, especially on today\'s javascript frameworks like angular/nest."},"Dive Deep":{"description":"Leaders operate at all levels, stay connected to the details, audit frequently, and are skeptical when metrics and anecdote differ. No task is beneath them.","Situation":"Scully SSR SSG bot crawling SEO site indexing for spiders.\\nThere was an initiative to promote the Search Engine Optimization so that google searches can link to our pages. The initial work for meta tags were added, but further enhancements can be made with angular universal (can even improve performance for first paint). I was not assigned the story and at standups it was starting to become evident that perhaps we would not be able to implement it, and so consultations with the architects eventually landed on a solution that could use scully, a static site generator for angular, still in alpha.  So standups continued and still it seemed like content was not rendering.  I eventually decided to help my friend out because of the pressure from the business (the managers had promised we would be the first at fidelity to implement this level of SEO in an angular app).  So I investigated the alpha scully github page and started with the hello world example.  it was relatively straightforward however, the use case in the tutorial was much simpler.  The content was baked into the html and was available for scraping (scully launches a puppeteer instance of chromium to load a web page, and scrape the final render and make it available as a static index.html file, you can have scully dynamically discover all the routes, or use pattern matching, and add post render plugins to really customize the app).  However, when we applied the basic setup the final rendered pages were blank.  From here I went through the flow of our app and realized that the app was needing the api to run through all the caching steps before scully runs, as the content will not be available on time.  Voila, was able to see content. But, this was all just locally!","Task":"Get Static Site Generated pages available for google bot (and other crawlers) but leave the normal build for normal uses.","Action":"Even getting the content loaded was not enough.  The render wasn\'t perfect, but it was good enough for the bot\'s, they dont use javascript and really the styles dont matter too much.  So to show the normal users the dist/build and the bots the static/build, we would have to check the user agent for each request, and serve up the correct file (replace for static path if necessary).  This led to a investigating the docker container that was housing the build and deployed in the jenkins pipeline.  The entire tribe was using a reusable node container with an app.js that checks the dist folder.  I added middleware that checked the user agent of the request object, and if it was a bot we changed the path for the file to serve to be the dist/static/ location instead.  Since we were in a monorepo, all of our apps were using the same app.js so had to be careful! Personally, i would have just deployed an nginx container but this node.js seemed to be the standard and i didn\'t want to introduce to many variables into the mix.","Result":"All was well, we were the first team to statically generate an app such that the bots are served pre rendered builds without javascript bundles, and the business was proud to tout that! life events has steadily grown in usership!"},"Deliver Results":{"description":"Leaders focus on the key inputs for their business and deliver them with the right quality and in a timely fashion. Despite setbacks, they rise to the occasion and never settle.","Situation":" (1) Internet explorer!\\nThe product we delivered was impressive given the time constraints.  We completely redesigned the Life Events app that was done in 2018, and it was more scalable, reliable, mobile friendly and was a crossover app.  It was a huge success.  There was only one problem: the app did not load in internet explorer!  I never thought to ask if we needed to support it, and neither did our UX team!  None of the styles they implemented worked in IE, and the angular app did not load IE despite differential loading in Angular 8 supposedly supporting it! \\n (2) Q2 2019. Brand new squad, no native company developers, just company QA.  A sister squad who since they were the first squad in the product space were very policical in the solutions, and a bit dominating.  A lot of business terms and acronyms and \'common understanding\' about the big divisions of the compnay that I was still learning. The original architecture (decided by the other team) was such that every new life event (essentially a category of the blog site), was going to be a separate app, and deployed separately. This is no simple task, with 30+ life events it could turn into years of working making 30 independent apps.  And on top of that we had to be the first hybrid app that is featured on both PI and WI, WI is very entitlement based, so even the architecture didn\'t account for that, there was only a bunch of questions on how to solve this.  Oh and new UX designs, so no components to start with. a blank slate completely!","Task":" (1) Get IE working! Despite Angular and Microsoft declaring it a dead browser and not officially supporting it, IE requirements live on! The whole team was scratching there heads.  Most of them had macbooks. \\n (2) In 1 quarter deploy life events with new UX designs, pulling from the CMS, SPA.  Normally this is a cake walk. But given the architecture it was gonna be hard to maintain, I didnt have access to spin up new repos or do any of the deployment side of things.  So, luckily there was a technology called nx which allows multiple js frameworks (angular, nest, react, vue, etc) both front end and back end, as well as shareable libraries.  This was my only hope!","Action":" (1) I luckily was able to find and research that there are polyfills and tsconfig (build configurations) that webpack and the angular compiler can use to explicitly support es5 and get internet explorer working. I finally brought up the app locally.  Though, there were still many libraries that weren\'t even available on application initialization, so many of our includes conditionals we modified to be indexOf, and once the app loaded, it looked a little funky, but it loaded! \\n (2) Decided that I can start with a monorepo, creating a shared ui library with independent components.  I was able to understand that each component on the page (not necessarily always) could be represented loosely in the CMS as a single component.  So, quickly asked a content editor to put in one of the pages we were gonna do.  I made a new app and api, and shared library.  Then I started to pull in company style sheets.  Then I took a look at the CMS response, it was not very uniform but at least there was data.  So, I decided to look at UX designs and make  components based of what I thought those schemas would be (title, description, etc).  Then I started with a single page template that mapped the response from the CMS POC and was able to inject that into the UI components.  Voila, one page mostly coming together!  All that was needed now after this initial, is some UX polishing, bringing in the header component and footer component, and that\'s on page (out of 12 needed for the Q3 deliverable). ","Result":" (1) After we got internet explorer working, the devs parallely took each UI component and worked on the styles that were missing to make IE work and not break the existing contemporary browsers!  Definitely should have clarified that requirement up front, a bit embarrassing! \\n (2) On this approach we could split up the work for translations and were able to achieve a development approach where content is entered, then mapped in a shared library.  Later we came up with a new architecture which relied on a consistent CMS entry of the data, but could auto translate without any more dev templating.  This is the approach we are standing on 15 life events later in the same app and api i started!  Oh an wi went well, we were able to achieve an MVP1 where we used the pi template to start, scrubbed non common/shared PWI stuff out, then called a separate (yet another new squad\'s) api that would give us some entitled content.  Later we did further MVPs, but at it\'s core its the same code I helped start when there was a lot of confusion!"},"Earns Trust":{"description":"Leaders listen attentively, speak candidly, and treat others respectfully. They are vocally self-critical, even when doing so is awkward or embarrassing. Leaders do not believe their or their team\u2019s body odor smells of perfume. They benchmark themselves and their teams against the best.","Situation":"(1) At Deutsche Bank it was my first rotation in the graduate program, had just come back from the global training in london. My first rotation was under A*** Lakhiani, and he was a manager of a team Analaytical & Market Data in the Equity space. The team members were all senior developers with each of them having over a decade of experience developing java applications.  My manager even expressed in a paraphrase manner that \\"I don\'t plan on having you code anything during your rotation, I have other plans for you\\".  While it was very kind, and I appreciated the opportunity to explore other aspects of a Technical Analyst, I was eager to get some coding experience.  My tasks were mainly tasks that hadn\'t been automated, and reports, and understanding the ecosystem of products, going through the excel sheets and seeing how to streamline the transformation of the data processing.  A lot of risk calculations were determined by these daily / weekly reports.  I was also tasked (felt blessed) with meeting every single manager in the Equity domain (couple floors at the office, i think there were like 25), and to take notes of their products and get an idea of how they all connected, as the systems were of course all connected and very detailed and built over years and multitude of projects/workers, so there was a lot to understand.  Still, I really wanted to prove that I could make code changes. (2) Sister squad recently had a lot of turnover (including their tech lead with the most expertise in the WI domain), many new folks joined who were unfamiliar with the Life Events platform, there were a lot of Q3 deliverables for new UX features that impacted a lot of stakeholders.","Task":"(1) Transform reports, go to the various internal websites and gather data and information (very manual process and data entry and gathering essentially).  For this one, I really had not a lot of experience in scripting, but I got my feet wet with grep, and trim commands with bash (cygwin), to take excel reports (csv) and process them and format them. (2) Other team was tasked with developing new features for the app, only in a specific life event.","Action":"(1) I found an automated way to do this, along with the website scraping and combined them so that it could all be done by a bot!  Today I would use python, but at the time I had a plugin for the browser that you could start at a url, look for particular fields, and send the output chunk at a time to a destination. The script would trigger this process and get the data from the bot, then parse it and format it with the csv files, then I could email them as expected. (2) The main point is that the initial PRs they had were shortcuts, enough to literally just show the component on a specific page (out of 100s) in a specific life event.  The app was built such that the ui components are usable as long as you inject the data it needs, thus any changes can be done app wide (and should).  It gets unwieldy when you introduce new ui components that are not accounted for yet in the CMS, and when their are a ton of if else\'s targeting specific url\'s it\'s hard to expand you have to first strip out things.  (There was also another story that was doing if else instead of just updating the config, p2p linking for email campaigns).  Anyway, I marked both their PRs as needs work, forked off a new branch, made the changes that I would have done, got a meeting and explained to them why this was better and addressed their concerns of \'The story says it can just be for this life event, so i thought it doesn\'t need to be backwards compatible\'.  I explained that just because you can make a short quick fix doesn\'t mean you should, if we wanted to include this ui update on any page on any life event it would require more work with your approach, it\'s immediately ready for customers the way i implemented it, same UI component, just optional data that can be added to open a new variation of the component.  Also, as a developer quality of life goes up as the code is simpler and more modular.  Specific conditions get really gritty, and as a UI developer you shouldn\'t always need crazy business logic to achieve a feature.","Result":"Saved hours / days!  My manager was really impressed as he did not expect me to find a clever way to pull it all together automatically, and eventually opened up git access for me and was giving me stabs at the code!  I got a lot of valuable learnings from the team there before I was off to my next rotation."},"Customer Obsession":{"description":"Leaders start with the customer and work backwards. They work vigorously to earn and keep customer trust. Although leaders pay attention to competitors, they obsess over customers.        ","Situation":"","Task":"","Action":"","Result":""},"Are Right, A Lot":{"description":"Leaders are right a lot. They have strong judgment and good instincts. They seek diverse perspectives and work to disconfirm their beliefs.","Situation":"","Task":"","Action":"","Result":""},"Hire and Develop the Best":{"description":"Leaders raise the performance bar with every hire and promotion. They recognize exceptional talent, and willingly move them throughout the organization. Leaders develop leaders and take seriously their role in coaching others. We work on behalf of our people to invent mechanisms for development like Career Choice.","Situation":"","Task":"","Action":"","Result":""},"Think Big":{"description":"Thinking small is a self-fulfilling prophecy. Leaders create and communicate a bold direction that inspires results. They think differently and look around corners for ways to serve customers.","Situation":"Our team needed static pages to increase SEO results.  Initially I helped get the Scully plugin working and it was fine, we had static pages for the bots (plus sitemap.xml and robots.txt).  I wasn\'t assigned it but there was an angular 11 upgrade which ultimately broke the Scully feature. ","Task":"Fix static page rendering so SEO results don\'t suffer.  Other teammates had already spent weeks together trying to get different dependencies and configurations to work to no avail, and the product owner wasn\'t liking the same update every day.","Action":"I checked the documentation and verified that what the other devs had exhausted every method of trying to get Scully to run again with angular 11. So, after researching that Scully was on top of puppeteer, i decided to just try to render the pages with puppeteer our selves.","Result":"Was able to achieve a quick poc in a short time, and then made a script that did the same thing Scully did, and also modified our prod configuration so that when deployed to a real environment the static pages would render.  This solution got me thinking that we don\'t need a framework specific plugin, but rather, we can run a node api (or endpoint, we already had an api) that would accept a url parameter and then puppeteer will render the page for you (this is again useful for situations where the browser/client doesn\'t run js, like the bots).  So now I was able to show the architects and other teams that they can build their static rendering process on top of that, or even further, we can make a router configuration to detect user agent and send all company traffic to this api that will render the page dynamically!  This is even better than a build time solution, as now all webapps can enjoy SEO."},"Frugality":{"description":"Accomplish more with less. Constraints breed resourcefulness, self-sufficiency, and invention. There are no extra points for growing headcount, budget size, or fixed expense.","Situation":"","Task":"","Action":"","Result":""},"Strive to be Earth\'s Best Employer":{"description":"Leaders work every day to create a safer, more productive, higher performing, more diverse, and more just work environment. They lead with empathy, have fun at work, and make it easy for others to have fun. Leaders ask themselves: Are my fellow employees growing? Are they empowered? Are they ready for what\'s next? Leaders have a vision for and commitment to their employees\' personal success, whether that be at Amazon or elsewhere.","Situation":"","Task":"","Action":"","Result":""},"Success and Scale Bring Broad Responsibility":{"description":"We started in a garage, but we\'re not there anymore. We are big, we impact the world, and we are far from perfect. We must be humble and thoughtful about even the secondary effects of our actions. Our local communities, planet, and future generations need us to be better every day. We must begin each day with a determination to make better, do better, and be better for our customers, our employees, our partners, and the world at large. And we must end every day knowing we can do even more tomorrow. Leaders create more than they consume and always leave things better than how they found them.","Situation":"","Task":"","Action":"","Result":""},"Learn and Be Curious":{"description":"Leaders are never done learning and always seek to improve themselves. They are curious about new possibilities and act to explore them.","Situation":"","Task":"","Action":"","Result":""}}')},hqaT:function(e,t,a){"use strict";a.r(t),a.d(t,"PlayFeature",(function(){return l}));var n=a("gBXZ"),o=a("fXoL"),i=a("3Pt+"),s=a("ofXK");function r(e,t){if(1&e&&(o.Ob(0,"option",5),o.kc(1),o.Nb()),2&e){const e=t.$implicit;o.bc("ngValue",e),o.zb(1),o.mc(" ",e," ")}}function d(e,t){if(1&e&&(o.Mb(0),o.Ob(1,"div",6),o.Kb(2,"div",7),o.Nb(),o.Ob(3,"div",8),o.Ob(4,"h2"),o.kc(5,"Situation"),o.Nb(),o.Kb(6,"div",7),o.Nb(),o.Ob(7,"div",9),o.Ob(8,"h2"),o.kc(9,"Task"),o.Nb(),o.Kb(10,"div",7),o.Nb(),o.Ob(11,"div",10),o.Ob(12,"h2"),o.kc(13,"Action"),o.Nb(),o.Kb(14,"div",7),o.Nb(),o.Ob(15,"div",11),o.Ob(16,"h2"),o.kc(17,"Result"),o.Nb(),o.Kb(18,"div",7),o.Nb(),o.Lb()),2&e){const e=o.ac();o.zb(2),o.bc("innerHTML",e.star[e.principle].description,o.fc),o.zb(4),o.bc("innerHTML",e.star[e.principle].Situation,o.fc),o.zb(4),o.bc("innerHTML",e.star[e.principle].Task,o.fc),o.zb(4),o.bc("innerHTML",e.star[e.principle].Action,o.fc),o.zb(4),o.bc("innerHTML",e.star[e.principle].Result,o.fc)}}let l=(()=>{class e{constructor(){this.star=n,this.principle=""}keys(e){return Object.keys(e)}ngOnInit(){document.body.style.backgroundImage="url('assets/photos/1308204.jpg')"}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=o.Db({type:e,selectors:[["play-feature"]],decls:5,vars:4,consts:[[1,"ubuntu"],[2,"text-align","center"],[1,"style",2,"border","1px solid white",3,"ngModel","ngModelChange"],[3,"ngValue",4,"ngFor","ngForOf"],[4,"ngIf","ngIfIn"],[3,"ngValue"],[1,"style",2,"color","white","border","1px solid white"],[3,"innerHTML"],[1,"style",2,"color","orange","border","1px solid orange"],[1,"style",2,"color","yellow","border","1px solid yellow"],[1,"style",2,"color","hotpink","border","1px solid hotpink"],[1,"style",2,"color","cyan","border","1px solid cyan"]],template:function(e,t){1&e&&(o.Ob(0,"div",0),o.Ob(1,"div",1),o.Ob(2,"select",2),o.Wb("ngModelChange",(function(e){return t.principle=e})),o.jc(3,r,2,2,"option",3),o.Nb(),o.Nb(),o.jc(4,d,19,5,"ng-container",4),o.Nb()),2&e&&(o.zb(2),o.bc("ngModel",t.principle),o.zb(1),o.bc("ngForOf",t.keys(t.star)),o.zb(1),o.bc("ngIf",t.principle)("ngIfIn",t.star))},directives:[i.f,i.c,i.d,s.i,s.j,i.e,i.g],styles:[".style[_ngcontent-%COMP%]{-webkit-backdrop-filter:blur(20px);backdrop-filter:blur(20px);border-radius:50px;padding:1rem;margin:2rem}"]}),e})()}}]);