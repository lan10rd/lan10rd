Convert a number to a hexadecimal string with:

hexString = yourNumber.toString(16);
And reverse the process with:

yourNumber = parseInt(hexString, 16);

promises

new Promise((resolve, reject) => {
    // call some callback.then(data => {
        //resolve(data)
    //}).catch(e => {
        //reject(e)
    //})
    
})


Gotcha #1: No script tags in innerHTML
It turns out that HTML5 does not allow script tags to be dynamically added using the innerHTML property. So the following will not execute and there will be no alert saying Hello World!

element.innerHTML = "<script>alert('Hello World!')</script>";
This is documented in the HTML5 spec:

Note: script elements inserted using innerHTML do not execute when they are inserted.

But beware, this doesn't mean innerHTML is safe from cross-site scripting. It is possible to execute JavaScript via innerHTML without using <script> tags as illustrated on MDN's innerHTML page.

Solution: Dynamically adding scripts
To dynamically add a script tag, you need to create a new script element and append it to the target element.

You can do this for external scripts:

var newScript = document.createElement("script");
newScript.src = "http://www.example.com/my-script.js";
target.appendChild(newScript);
And inline scripts:

var newScript = document.createElement("script");
var inlineScript = document.createTextNode("alert('Hello World!');");
newScript.appendChild(inlineScript); 
target.appendChild(newScript);
Gotcha #2: No document.write
It turns out that when scripts are loaded asynchronously they cannot call document.write. The calls will simply be ignored and a warning will be written to the console.