---- promises and observables ----

so typically with promises, callbacks (function then runs as a parameter to a method call) are used to trigger/unwrap the promisesable function... this helps achieve asyncronous like behavior because promises are supposed to run in a separate thread other than the main loop (i think, i know for async calls in node they do).  anyhoo, this is what typical promise like syntax looks like:

a()
{ 
    return new Promise((resolve, reject) => { 
        setTimeout(() => {}, 1000)
        resolve('yo') 
    })
}

b() { 

    let aPromise = this.a()

    // at this point aPromise does not equal 'yo', in fact i dont think it's even been triggered, when you call the method .then however, the promise is triggered and you can write a callback function to do what you want

    aPromise.then(data => { console.log(data) }).catch(e => { console.log(e) })  //prints yo after 1s

    // and if the promise called reject(new Error()) or some unknown exception happened, you would enter the .catch() bit... you can chain promises and they will wait and pass on the to the next, as .then() itself is a promise

    aPromise.then(data => { data + "hi" }).then(dataAgain => { console.log(dataAgain )}) //prints "yohi"

}

this is fine and dandy, but it can get annoying when all methods that rely on promises themselves become callbacky... sometime down the road, async/await syntax was introduced.. all you need to do is mark a method that is going to unveil a promise with async (you can even mark the method returning a promise with async, in fact you might have to), and then you can use await to avoid jumping into callback syntax, back to java syntax like i prefer (instruction, then another instruction).. when you mark a function async, it automatically is wrapped in a promise by the compiler, but without all the extra syntax

a() {
    return new Promise((resolve, reject) => { 
        setTimeout(() => { }, 1000)
        resolve('yo')
    })
}

async b() {
    let aPromise = this.a()
    let data = await aPromise() // be careful, now you should be wrapping in try/catch!
    console.log(data)
}

-----thats it on promises, time for the good stuff, rxjs streams-----




const tick$ = Observable.interval(1000);
const subject = new Subject();
subject.subscribe(data => console.log('1', data));
subject.subscribe(data => console.log('2', data));
tick$.subscribe(subject);

subject:

allows you to subscribe and push using .next() and .subscribe() or .asObservable().subscribe()


behavior subject:

gives you last value emitted when subscribing for first time, also need initial value,
commonly used for streamable caching

new BehaviorSubject<any>({yo: 'yo'})


replay subject:

allows you to get the nth value emitted, probably good for messages and joining a chat party later


------

pipe, tap

operators:

map (projection)

$.map(x => x * 100).subscribe(data => console.log(data))  // 100 if the value emitted from $ is 1


filter (predication, reduction)
