docker info
docker build -t splash .
docker build --cache-from node:alpine -t angular-cli .
docker build --cache-from node:alpine -t node-frameworks .
docker logs -f glass-nginx

docker run === docker container run

/* when doing a build, it looks like RUN makes a separate parent build out of each RUN, so instead of doing RUN npm i -g for each package, just do one RUN with && like FROM node
RUN npm i -g @angular/cli && npm i -g @nestjs/cli && npm i -g @vue/cli && npm i -g http-server && npm i -g serve && npm i -g ember-cli && npm i -g express-generator && npm i -g fastify-cli && npm i -g sails /*

/* use -dit !!!! seems to matter when trying to exec */

--cpus=".5"

docker run -dit --rm --name alpine alpine
docker run -dit --rm -v ~/earth/realms/glass: /app --name alpine alpine

run always with --restart=always

--stop all--
docker container stop $(docker container ls -aq)

--save / load--
======

docker save angular | gzip > angular.tar.gz
docker load < angular.tar.gz

--- rename image ---
docker tag d58 myname/server:latest  **(d58 is first 3 letters of image hash)**

======

setup

1) docker load < angular.tar.gz
2) docker load < nest-docker.tar.gz
3) docker load < nginx-alpine.tar.gaz
4) docker network create earth_network



docker build --rm --compress --cache-from=alpine:latest -t glass-alpine . -f alpine-curl.dockerfile 


docker save image > image.tar
docker load --input image.tar

/* networks */
docker network create glass-network
docker network connect glass-network tribe-glass-app-hakuna-matata
docker network inspect glass-network

/* jump into a running container */
docker exec -it container sh

docker volume ls
docker ps -a
docker image ls
docker image rm
docker rmi --force 1ec22a75dc58
docker system prune -a
docker volume prune
docker image prune
docker image rm id
docker container prune

docker run hello-world
docker run -it ubuntu bash /** -it to interact with shell **/
docker run --attach name /** --attach to connect to the output **/
docker run -v ~/Downloads/:/usr/share/nginx/html:ro -p 80:80 -d nginx  /* ~/Downloads is where index.html is */

docker plugin install --grant-all-permissions vieux/sshfs

docker rm alpine || true  && docker run -it --name=alpine -v ~/earth/realms/glass:/usr/src/app  alpine
docker rm ubuntu || true  && docker run -it --name=ubuntu -v ~/earth/realms/nest/node_modules:/usr/src/app/realms/nest/node_modules -v ~/earth/realms/glass/apps/splash-api:/usr/src/app/realms/glass/apps/splash-api -w /usr/src/app/realms/glass/apps/splash-api/dist ubuntu
docker rm alpine || true  && docker run -it --name=alpine --volume-driver vieux/sshfs -v ~/earth/realms/nest/node_modules:/usr/src/app/realms/nest/node_modules -v ~/earth/realms/glass/apps/splash-api:/usr/src/app/realms/glass/apps/splash-api -w /usr/src/app/realms/glass/apps/splash-api/dist alpine
docker rm ubuntu || true && docker run -it --name=ubuntu -v ~/earth/realms/glass/apps/hakuna-matata:/usr/src/app -w /usr/src/app/ ubuntu
docker rm alpine || true  && docker run -it --name=alpine -v ~/earth/realms/glass:/usr/src/app  alpine

docker stop name
docker rm name


/** docker **/

docker rm --force earth-docker || true && docker run --privileged --rm -dit --name earth-docker --network=earth_network -v ~/earth/:/root/earth -p 80:80 -p 443:443 -w /root docker:dind

docker exec -it earth-docker docker load --input ~/earth/systems/docker/images/node-frameworks-alpine.tar
docker exec -it earth-docker docker load --input ~/earth/systems/docker/images/nginx-alpine.tar
docker exec -it earth-docker docker network create glass-network

docker exec -it earth-docker bash
docker exec -it earth-docker sh
docker exec -it --privileged --name docker info

docker run --privileged -d --rm --name=earth-docker docker:dind
-v /var/run/docker.sock:/var/run/docker.sock


/** nginx **/
docker rm earth-nginx --force || true && docker run --rm --network=earth_network -m 5mb --name earth-nginx -v ~/earth/systems/docker/earth/nginx/:/etc/nginx:ro -p 80:80 -p 443:443 nginx:alpine

docker rm glass-nginx --force || true && docker run --rm -d --network=glass-network -m 5mb --name glass-nginx -v ~/earth/systems/docker/nginx/:/etc/nginx:ro -p 80:80 -p 443:443 nginx:alpine

docker exec -it earth-nginx nginx -s reload

docker exec -it glass-nginx nginx -s reload

when writing the conf file for nginx, you should know that instead of reverse proxy_passing to 127.0.0.1 you actually want to point to the name of the docker instance along with it's internal port...also you're gonna wanna use the set $variable variable_value to be the value for proxy_pass or else you wont be able to restart the nginx instance without a failure, and lastly you need to use docker's resolver to do that as well, resolver 127.0.0.11 valid=30s; , which gives a cache time of 30s or something




/** angular apps build and deploy (with -m memory limit of 5mb) **/

docker rm tribe-glass-app-hakuna-matata --force || true && docker run --rm --name tribe-glass-app-hakuna-matata -v ~/earth/realms/angular/node_modules:/usr/src/app/realms/angular/node_modules -v ~/earth/realms/glass/apps/hakuna-matata:/usr/src/app/realms/glass/apps/hakuna-matata -w /usr/src/app/realms/glass/apps/hakuna-matata node-frameworks-alpine ng build --prod --aot

docker rm tribe-glass-app-hakuna-matata --force || true && docker run --rm -m 5mb --name tribe-glass-app-hakuna-matata --network=glass-network -v ~/earth/realms/glass/apps/hakuna-matata/dist/hakuna-matata/:/usr/share/nginx/html:ro -p 8090:80 -d nginx:alpine

docker rm tribe-glass-app-chalk-ash-pearl-caramel --force || true && docker run --rm --name tribe-glass-app-chalk-ash-pearl-caramel -v ~/earth/realms/angular/node_modules:/usr/src/app/realms/angular/node_modules -v ~/earth/realms/glass/apps/chalk-ash-pearl-caramel:/usr/src/app/realms/glass/apps/chalk-ash-pearl-caramel -w /usr/src/app/realms/glass/apps/chalk-ash-pearl-caramel node-frameworks-alpine ng build --prod --aot

docker rm tribe-glass-app-chalk-ash-pearl-caramel --force || true && docker run --rm -d -m 5mb --name tribe-glass-app-chalk-ash-pearl-caramel --network=glass-network -v ~/earth/realms/glass/apps/chalk-ash-pearl-caramel/dist/chalk-ash-pearl-caramel/:/usr/share/nginx/html:ro -p 8009:80 nginx:alpine


docker rm tribe-glass-app-earth --force || true && docker run --rm --name tribe-glass-app-earth -v ~/earth:/root/earth -w /root/earth/realms/glass/apps/earth node-frameworks-alpine ng build --prod --aot

docker rm tribe-glass-app-earth --force || true && docker run --rm -m 5mb --name tribe-glass-app-earth --network=glass-network -v ~/earth/realms/glass/apps/earth/dist/earth/:/usr/share/nginx/html:ro -p 4200:80 -d nginx:alpine



/** nestjs / node apps build and deploy (with -m memory limit of 20mb) **/
docker rm tribe-glass-app-surf-api --force || true && docker run --rm --name tribe-glass-app-surf-api -v ~/earth/realms/nest/node_modules:/usr/src/app/realms/nest/node_modules -v ~/earth/realms/glass/apps/surf-api:/usr/src/app/realms/glass/apps/surf-api -w /usr/src/app/realms/glass/apps/surf-api node-frameworks-alpine npm run destroy && npm run build

docker rm tribe-glass-app-surf-api --force || true && docker run -d --rm -m 20mb --name tribe-glass-app-surf-api --network=glass-network -v ~/earth/realms/nest/node_modules:/usr/src/app/realms/nest/node_modules -v ~/earth/realms/glass/apps/surf-api:/usr/src/app/realms/glass/apps/surf-api -w /usr/src/app/realms/glass/apps/surf-api/dist -p 5125:5125 node-frameworks-alpine main



docker rm tribe-glass-app-earth-api --force || true && cd ~/earth/realms/glass/apps/earth-api && docker run --rm --name tribe-glass-app-earth-api -v ~/earth:/root/earth -w /root/earth/realms/glass/apps/earth-api node-frameworks-alpine npm run destroy

docker rm tribe-glass-app-earth-api --force || true && cd ~/earth/realms/glass/apps/earth-api && docker run --rm --name tribe-glass-app-earth-api -v ~/earth:/root/earth -w /root/earth/realms/glass/apps/earth-api node-frameworks-alpine npm run build

docker rm tribe-glass-app-earth-api --force || true && cd ~/earth/realms/glass/apps/earth-api && docker run --rm -d -m 20mb --name tribe-glass-app-earth-api --network=glass-network -v ~/earth/:/root/earth/ -w /root/earth/realms/glass/apps/earth-api/dist -p 5125:5125 node-frameworks-alpine main


/** python **/
docker rm tribe-glass-app-mission-control --force || true && docker run --rm -m 10mb --name tribe-glass-app-mission-control -v ~/earth/realms/glass/apps/mission-control:/usr/src/app/ -w /usr/src/app/ -p 44155:44155 python-frameworks python3 main.py


/* from nodejs github to run script from nodejs image*/
docker run -it --rm --name my-running-script -v "$PWD":/usr/src/app -w /usr/src/app node:8 node your-daemon-or-script.js

FROM node:alpine AS builder
WORKDIR /app
COPY . .
FROM nginx:alpine
COPY --from=builder /app/dist/hakuna-matata/* /usr/share/nginx/html/

FROM node:13-alpine
WORKDIR /usr/src/app
CMD node /app/main
EXPOSE 31337

docker build -t glass-passport-api .
docker run --name glass-passport-api -v ~/earth/realms/glass/apps/passport-api/dist:/usr/src/app:ro -p 31337:31337 -d glass-passport-api -t

/* example of running angular app */
docker rm tribe-glass-app-hakuna-matata || true && docker run --rm --name tribe-glass-app-hakuna-matata -v ~/earth/realms/glass/apps/hakuna-matata/dist/hakuna-matata/:/usr/share/nginx/html:ro -p 8090:80 -d nginx

/* example of running nest app */
docker rm tribe-glass-app-passport-api --force || true && docker run -d --rm --name tribe-glass-app-passport-api -v ~/earth:/usr/src/app -p 31337:31337 -w /usr/src/app/realms/glass/apps/passport-api/dist node main

docker rm tribe-glass-app-surf-api --force || true && docker run -d --rm --name tribe-glass-app-surf-api -v ~/earth:/usr/src/app -p 5125:5125 -w /usr/src/app/realms/glass/apps/surf-api/dist node main

================================= docker docs =================================

--------------------------------- run ---------------------------------
--expose=[]: Expose a port or a range of ports inside the container.
             These are additional to those exposed by the `EXPOSE` instruction
-P         : Publish all exposed ports to the host interfaces
-p=[]      : Publish a container's port or a range of ports to the host
               format: ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort | containerPort
               Both hostPort and containerPort can be specified as a
               range of ports. When specifying ranges for both, the
               number of container ports in the range must match the
               number of host ports in the range, for example:
                   -p 1234-1236:1234-1236/tcp

               When specifying a range for hostPort only, the
               containerPort must not be a range.  In this case the
               container port is published somewhere within the
               specified hostPort range. (e.g., `-p 1234-1236:1234/tcp`)

               (use 'docker port' to see the actual mapping)

--link=""  : Add link to another container (<name or id>:alias or <name or id>)

/* environment variables */
-e "foo=bar"
-e today

-v, --volume=[host-src:]container-dest[:<options>]: Bind mount a volume.
The comma-delimited `options` are [rw|ro], [z|Z],
[[r]shared|[r]slave|[r]private], and [nocopy].
The 'host-src' is an absolute path or a name value.

If neither 'rw' or 'ro' is specified then the volume is mounted in
read-write mode.

The `nocopy` mode is used to disable automatically copying the requested volume
path in the container to the volume storage location.
For named volumes, `copy` is the default mode. Copy modes are not supported
for bind-mounted volumes.

--volumes-from="": Mount all volumes from the given container(s)

-w="": Working directory inside the container

-u="", --user="": Sets the username or UID used and optionally the groupname or GID for the specified command.

The followings examples are all valid:
--user=[ user | user:group | uid | uid:gid | user:gid | uid:group ]

==== docker run ====
--add-host    Add a custom host-to-IP mapping (host:ip)
--attach , -a   Attach to STDIN, STDOUT or STDERR
--blkio-weight    Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)
--blkio-weight-device   Block IO weight (relative device weight)
--cap-add   Add Linux capabilities
--cap-drop    Drop Linux capabilities
--cgroup-parent   Optional parent cgroup for the container
--cidfile   Write the container ID to the file
--cpu-count   CPU count (Windows only)
--cpu-percent   CPU percent (Windows only)
--cpu-period    Limit CPU CFS (Completely Fair Scheduler) period
--cpu-quota   Limit CPU CFS (Completely Fair Scheduler) quota
--cpu-rt-period   API 1.25+
Limit CPU real-time period in microseconds
--cpu-rt-runtime    API 1.25+
Limit CPU real-time runtime in microseconds
--cpu-shares , -c   CPU shares (relative weight)
--cpus    API 1.25+
Number of CPUs
--cpuset-cpus   CPUs in which to allow execution (0-3, 0,1)
--cpuset-mems   MEMs in which to allow execution (0-3, 0,1)
--detach , -d   Run container in background and print container ID
--detach-keys   Override the key sequence for detaching a container
--device    Add a host device to the container
--device-cgroup-rule    Add a rule to the cgroup allowed devices list
--device-read-bps   Limit read rate (bytes per second) from a device
--device-read-iops    Limit read rate (IO per second) from a device
--device-write-bps    Limit write rate (bytes per second) to a device
--device-write-iops   Limit write rate (IO per second) to a device
--disable-content-trust true  Skip image verification
--dns   Set custom DNS servers
--dns-opt   Set DNS options
--dns-option    Set DNS options
--dns-search    Set custom DNS search domains
--domainname    Container NIS domain name
--entrypoint    Overwrite the default ENTRYPOINT of the image
--env , -e    Set environment variables
--env-file    Read in a file of environment variables
--expose    Expose a port or a range of ports
--gpus    API 1.40+
GPU devices to add to the container (‘all’ to pass all GPUs)
--group-add   Add additional groups to join
--health-cmd    Command to run to check health
--health-interval   Time between running the check (ms|s|m|h) (default 0s)
--health-retries    Consecutive failures needed to report unhealthy
--health-start-period   API 1.29+
Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)
--health-timeout    Maximum time to allow one check to run (ms|s|m|h) (default 0s)
--help    Print usage
--hostname , -h   Container host name
--init    API 1.25+
Run an init inside the container that forwards signals and reaps processes
--interactive , -i    Keep STDIN open even if not attached
--io-maxbandwidth   Maximum IO bandwidth limit for the system drive (Windows only)
--io-maxiops    Maximum IOps limit for the system drive (Windows only)
--ip    IPv4 address (e.g., 172.30.100.104)
--ip6   IPv6 address (e.g., 2001:db8::33)
--ipc   IPC mode to use
--isolation   Container isolation technology
--kernel-memory   Kernel memory limit
--label , -l    Set meta data on a container
--label-file    Read in a line delimited file of labels
--link    Add link to another container
--link-local-ip   Container IPv4/IPv6 link-local addresses
--log-driver    Logging driver for the container
--log-opt   Log driver options
--mac-address   Container MAC address (e.g., 92:d0:c6:0a:29:33)
--memory , -m   Memory limit
--memory-reservation    Memory soft limit
--memory-swap   Swap limit equal to memory plus swap: ‘-1’ to enable unlimited swap
--memory-swappiness -1  Tune container memory swappiness (0 to 100)
--mount   Attach a filesystem mount to the container
--name    Assign a name to the container
--net   Connect a container to a network
--net-alias   Add network-scoped alias for the container
--network   Connect a container to a network
--network-alias   Add network-scoped alias for the container
--no-healthcheck    Disable any container-specified HEALTHCHECK
--oom-kill-disable    Disable OOM Killer
--oom-score-adj   Tune host’s OOM preferences (-1000 to 1000)
--pid   PID namespace to use
--pids-limit    Tune container pids limit (set -1 for unlimited)
--platform    experimental (daemon)API 1.32+
Set platform if server is multi-platform capable
--privileged    Give extended privileges to this container
--publish , -p    Publish a container’s port(s) to the host
--publish-all , -P    Publish all exposed ports to random ports
--read-only   Mount the container’s root filesystem as read only
--restart no  Restart policy to apply when a container exits
--rm    Automatically remove the container when it exits
--runtime   Runtime to use for this container
--security-opt    Security Options
--shm-size    Size of /dev/shm
--sig-proxy true  Proxy received signals to the process
--stop-signal SIGTERM Signal to stop a container
--stop-timeout    API 1.25+
Timeout (in seconds) to stop a container
--storage-opt   Storage driver options for the container
--sysctl    Sysctl options
--tmpfs   Mount a tmpfs directory
--tty , -t    Allocate a pseudo-TTY
--ulimit    Ulimit options
--user , -u   Username or UID (format: <name|uid>[:<group|gid>])
--userns    User namespace to use
--uts   UTS namespace to use
--volume , -v   Bind mount a volume
--volume-driver   Optional volume driver for the container
--volumes-from    Mount volumes from the specified container(s)
--workdir , -w    Working directory inside the container

-- containers --
docker container attach Attach local standard input, output, and error streams to a running container
docker container commit Create a new image from a container’s changes
docker container cp Copy files/folders between a container and the local filesystem
docker container create Create a new container
docker container diff Inspect changes to files or directories on a container’s filesystem
docker container exec Run a command in a running container
docker container export Export a container’s filesystem as a tar archive
docker container inspect  Display detailed information on one or more containers
docker container kill Kill one or more running containers
docker container logs Fetch the logs of a container
docker container ls List containers
docker container pause  Pause all processes within one or more containers
docker container port List port mappings or a specific mapping for the container
docker container prune  Remove all stopped containers
docker container rename Rename a container
docker container restart  Restart one or more containers
docker container rm Remove one or more containers
docker container run  Run a command in a new container
docker container start  Start one or more stopped containers
docker container stats  Display a live stream of container(s) resource usage statistics
docker container stop Stop one or more running containers
docker container top  Display the running processes of a container
docker container unpause  Unpause all processes within one or more containers
docker container update Update configuration of one or more containers
docker container wait Block until one or more containers stop, then print their exit codes