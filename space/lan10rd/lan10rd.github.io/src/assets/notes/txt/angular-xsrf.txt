import { NgModule, APP_INITIALIZER } from '@angular/core'
import { CommonModule } from '@angular/common'
import { HttpClientModule, HTTP_INTERCEPTORS, HttpClientXsrfModule, HttpClientJsonpModule } from '@angular/common/http'
import { CommonHttpXsrfInterceptor } from '../../../../libs/common/http/xsrf/xsrf.interceptor.ng'
import { CommonHttpXsrfService } from '../../../../libs/common/http/xsrf/xsrf.service.ng'
let appInitializer = (xsrfService: CommonHttpXsrfService) => { return () => { return xsrfService.loadAppConfig() } }

@NgModule
({
    declarations: 
    [

    ],
    imports: 
    [
        CommonModule,
        HttpClientModule,
        // HttpClientJsonpModule,
        //these are defaults, i never got to work... i believe it's because the api is configured with _csrf (key token is signed with) to be in a cookie
        // HttpClientXsrfModule.withOptions({   
        //     cookieName: 'XSRF-TOKEN',    
        //     headerName: 'X-XSRF-TOKEN'
        // })
    ],
    exports: 
    [

    ],
    providers: 
    [
        CommonHttpXsrfService,
        { provide: APP_INITIALIZER, useFactory: appInitializer, multi: true, deps: [CommonHttpXsrfService] },
        { provide: HTTP_INTERCEPTORS, useClass: CommonHttpXsrfInterceptor, multi: true }
    ]
}) 
export class CommonHttpXsrfModule
{

}

import { Injectable, Inject } from '@angular/core'
import { HttpClient, HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpErrorResponse } from '@angular/common/http'
import { CommonStreamsService } from '../../../../libs/common/streams/streams.service.ng'
import { Observable, of, throwError } from 'rxjs'
import { tap, catchError } from 'rxjs/operators'

@Injectable
({
    providedIn: 'root'
})
export class CommonHttpXsrfService
{

    xsrf = 'love me sidewayyyys'
    interceptFunction: Function

    constructor
    (
        private http: HttpClient,
        @Inject('XSRF_OPTIONS') private xsrfOptions: any,
        public streams: CommonStreamsService
    )
    { 
        if (!('endpoint' in xsrfOptions))
            xsrfOptions['endpoint'] = '/xsrf'
        if (!('returnKey' in xsrfOptions))
            xsrfOptions['returnKey'] = 'xsrf'
        if (!('key' in xsrfOptions))
            xsrfOptions['key'] = 'x-xsrf-token'
        if (!('api' in xsrfOptions))
            xsrfOptions['api'] = 'https://api.ass.space'
        this.interceptFunction = this.defaultIntercept
    }

    loadAppConfig
    (
    )
    {
        return this.http.get(this.xsrfOptions.api + this.xsrfOptions.endpoint, {withCredentials: true}).toPromise().then(data => { this.xsrf = data[this.xsrfOptions.returnKey] })
    }

    defaultIntercept
    (
        req: HttpRequest<any>,
        next: HttpHandler
    )
    {
        return req.url.startsWith(this.xsrfOptions.api) ?
            next.handle
            (
                req.clone
                (
                    {
                        withCredentials: true,
                        setHeaders: {
                            [this.xsrfOptions.key]: this.xsrf
                        }
                    }
                )
            ).pipe
            (
                tap
                (
                    () => {},
                    (err: any) =>
                    {
                        if
                        (
                            err.status === 401
                        )
                            this.streams.dispatch('passport', 'unauthorized', err, {keepAlive: true})
                    }
                )
            ) : next.handle(req)
    }

}

import { Injectable, Inject } from '@angular/core'
import { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http'
import { Observable } from 'rxjs'
import { CommonHttpXsrfService } from '../../../../libs/common/http/xsrf/xsrf.service.ng'

@Injectable
({
    providedIn: 'root'
})
export class CommonHttpXsrfInterceptor implements HttpInterceptor
{

    constructor
    (
        public srv: CommonHttpXsrfService
    )
    {

    }

    intercept
    (
        req: HttpRequest<any>,
        next: HttpHandler
    ): Observable<HttpEvent<any>>
    {
        return this.srv.interceptFunction(req, next)
    }

}