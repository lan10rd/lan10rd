/* so this works because we utilize .includes to check if an array includes a string from a particular index... this means we can create a tmp array of id's of some variety out of a string (could be a field or concatenation of fields).. then we loop over the array and filter out anything that is not included after a specific index! */

/* filter out duplicates based on a field, 'title'

let arr = [{title: 'a', ...}, {title: 'b', ...}, {title: 'a', ...}]
let ids = arr.map(o => o.title)
let filtered = arr.filter(({title}, index: number) => !ids.includes(title, index + 1))

/* you can extend the "uniqueness" to be on multiple fields as well */

let arr = [{title: 'a', animal: 'horse', ...}, {title: 'b', ...}, {title: 'a', animal: 'dog' ...}]
let ids = arr.map(o => o.title + o.animal)
let filtered = arr.filter(({title, animal}, index: number) => !ids.includes(title + animal, index + 1))


/* potentionally generic implementations */

dedup
(
    arr: any[],
    prop: string
)
{
    let tmp = arr.map((a:any) => a[prop])
    return arr.filter((a: any, i: number) => { return !tmp.includes(a[prop], i + 1) })
}

dedups
(
    arr: any[],
    props: string[]
)
{
    let key_fun = (object: any) => {
        let key: string = ''
        for (let prop of props) key += object[prop]
    }
    let tmp = arr.map((a:any) => key_fun(a))
    return arr.filter((a: any, i: number) => { return !tmp.includes(key_fun(a), i + 1) })
}